# Builds, tests, packages and publishes a dotnet based solution.
parameters:
- name: Solution
  type: string
  displayName: 'Solution to process.'

- name: BuildConfiguration
  type: string
  default: 'Release'
  displayName: 'Configuration name to build.'
- name: buildPlatform
  type: string
  default: 'Any CPU'
  displayName: 'Platform name to build.'
- name: DotNetSdkVersion
  type: string
  default: ''
  displayName: 'Specific .NET SDK version to use.'

- name: BeforeTestsSteps
  type: stepList
  default: []
  displayName: 'Optional steps to execute before test execution.'
- name: AfterTestsSteps
  type: stepList
  default: []
  displayName: 'Optional steps to execute after test execution.'
- name: NoTests
  type: boolean
  default: false
  displayName: 'Whether not to run tests.'
- name: WithPlatinaTestInit
  type: boolean
  default: false
  displayName: 'Whether to run Platina test initialization.'
- name: WithPack
  type: boolean
  default: false
  displayName: 'Whether to run ''dotnet package''.'
- name: WithPublish
  type: boolean
  default: false
  displayName: 'Whether to run ''dotnet publish'' and publish to pipeline artifacts.'
- name: WithRelease
  type: boolean
  default: false
  displayName: 'Whether to push created NuGets to external feed and/or add publish output to pipeline artifacts.'

- name: NuGetToolVersion
  type: string
  default: ''
  displayName: 'Specifc NuGet tool version to use.'
- name: NuGetConfigPath
  type: string
  default: '.nuget/NuGet.Config'
  displayName: 'Path to NuGet.config file.'
- name: ExternalFeedCredentials
  type: string
  default: ''
  displayName: 'Names of external NuGet feed links. '
- name: WithNuGetCache
  type: boolean
  default: true
  displayName: 'Whether to cache NuGet packages. NUGET_PACKAGES environment variable still needs to be set though.'

- name: azureSubscription
  type: string
  default: ''
  displayName: 'Optional Azure Subscription to run ''dotnet test'' under Azure CLI context. So you can access Azure resources (like App Configuration, Key Vault, etc) with authenticated credentials.'

steps:
- ${{ if ne(parameters.NuGetToolVersion, '') }}:
  # Hosted build agent windows-2022 doesn't seem to auto select right nuget version, so we allow to set it explicitly.
  # See https://github.com/actions/virtual-environments/issues/4754
  - task: NuGetToolInstaller@1
    displayName: 'Use specific NuGet tool version ${{ parameters.NuGetToolVersion }}'
    inputs:
      versionSpec: ${{ parameters.NuGetToolVersion }}

- ${{ if ne(parameters.DotNetSdkVersion, '') }}:
  - task: UseDotNet@2
    displayName: 'Use specific .NET SDK version ${{ parameters.DotNetSdkVersion }}'
    inputs:
      packageType: 'sdk'
      version: ${{ parameters.DotNetSdkVersion }}
      includePreviewVersions: true

- ${{ if ne(parameters.ExternalFeedCredentials, '') }}:
  - task: NuGetAuthenticate@0
    displayName: 'NuGet Authenticate'
    inputs:
      nuGetServiceConnections: ${{ parameters.ExternalFeedCredentials }}

- ${{ if eq(parameters.WithNuGetCache, 'true') }}:
  # As we don't use package lock files, we want to make sure our cache isn't too far behind the dotnet restore.
  # We mainly want to optimize waiting for PR builds.
  - pwsh: echo "##vso[task.setvariable variable=NuGetCacheKey]$(Get-Date -Format yyyyMMdd)"
    displayName: NuGet Package Cache Key
  - task: Cache@2
    displayName: NuGet Package Caching
    inputs:
      key: nuget | "$(Agent.OS)" | "$(NuGetCacheKey)"
      restoreKeys: |
        nuget | "$(Agent.OS)"
      path: $(NUGET_PACKAGES)
    condition: ne(variables.NUGET_PACKAGES, '')
  
- task: DotNetCoreCLI@2
  displayName: 'DotNet Restore'
  inputs: 
    command: 'restore'
    projects: ${{ parameters.Solution }}
    ${{ if parameters.NuGetConfigPath }}:
      feedsToUse: 'config'
      nugetConfigPath: ${{ parameters.NuGetConfigPath }}
      externalFeedCredentials: ${{ parameters.ExternalFeedCredentials }}
      restoreArguments: --locked-mode

- ${{ if and( ne(parameters.NoTests, true), ne(parameters.WithPlatinaTestInit, false) ) }}:
  - task: PowerShell@2
    displayName: 'Platina Begin Test Initialization'
    inputs:
      targetType: 'inline'
      script: |
        &'C:\Program Files\dotnet\dotnet.exe' msbuild /target:BeginPlatinaTestInit '${{ parameters.Solution }}'
        # Ignore msbuild errors because targets might not be present in projects.
        exit 0;

- task: DotNetCoreCLI@2
  displayName: 'DotNet Tool Restore'
  inputs: 
    command: 'custom'
    custom: 'tool'
    arguments: 'restore'

- task: DotNetCoreCLI@2
  displayName: 'DotNet Build'
  inputs:
    command: 'build'
    projects: ${{ parameters.Solution }}
    arguments: '--configuration ${{ parameters.BuildConfiguration }} /p:Platform="${{ parameters.BuildPlatform }}" --no-restore'
  condition: succeededOrFailed()

- ${{ if eq(parameters.WithPack, 'true') }}:
  - task: DotNetCoreCLI@2
    displayName: 'DotNet Pack'
    inputs:
      command: 'pack'
      packagesToPack: ${{ parameters.Solution }}
      versioningScheme: 'off'
      arguments: '--configuration $(BuildConfiguration) --no-restore --no-build'

- ${{ if eq(parameters.WithPublish, 'true') }}:
  - task: DotNetCoreCLI@2
    displayName: 'DotNet Publish'
    inputs:
      command: 'publish'
      projects: ${{ parameters.Solution }}
      arguments: '--configuration ${{ parameters.BuildConfiguration }} --no-restore --no-build --output $(Build.ArtifactStagingDirectory)\packages'
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false

- ${{ if ne(parameters.NoTests, 'true') }}:
  - ${{ each step in parameters.BeforeTestsSteps }}:
    - ${{ step }} 
  - ${{ if and( eq(parameters.NoTests, false), ne(parameters.WithPlatinaTestInit, false) ) }}:
    - task: PowerShell@2
      displayName: 'Platina End Test Initialization'
      inputs:
        targetType: 'inline'
        script: |
          &'C:\Program Files\dotnet\dotnet.exe' msbuild /target:EndPlatinaTestInit '${{ parameters.Solution }}'
          # Ignore msbuild errors because targets might not be present in projects.
          exit 0;

  - ${{ if eq(parameters.azureSubscription, '') }}:
    - task: DotNetCoreCLI@2
      displayName: 'DotNet Test'
      inputs:
        command: 'test'
        projects: '**/*[Tt]ests/*.csproj'
        arguments: '--configuration ${{ parameters.BuildConfiguration }} --no-restore --no-build'
      condition: succeededOrFailed()

  - ${{ else }}:
    - task: AzureCLI@2
      displayName: 'DotNet Test (AzureCLI)'
      inputs:
        azureSubscription: ${{ parameters.azureSubscription }}
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: 'dotnet test ${{ parameters.Solution }} --logger trx --results-directory $(Agent.TempDirectory) --configuration ${{ parameters.BuildConfiguration }} --no-restore --no-build'
      condition: succeededOrFailed()

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '*.trx'
        searchFolder: '$(Agent.TempDirectory)'
      condition: succeededOrFailed()

  - ${{ each step in parameters.AfterTestsSteps }}:
    - ${{ step }} 

- ${{ if and( eq(parameters.WithPack, 'true'), eq(parameters.WithRelease, 'true') ) }}:
  # Push NuGets.
  - task: NuGetCommand@2
    displayName: 'NuGet Push'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg;$(Build.ArtifactStagingDirectory)/*.snupkg;!$(Build.ArtifactStagingDirectory)/*.symbols.nupkg'
      nuGetFeedType: 'external'
      publishFeedCredentials: $(externalFeedCredentials)

  # The above task does publish the .snupkgs, but Visual Studio can't seem to consume them from the artifact feed yet?
  # Therefore, also publish the .pdb to the SymbolServer of this organization.
  # Users can get rich debugging experience by adding the VSTS symbol server in Visual Studio.
  - task: PublishSymbols@2
    displayName: 'Publish symbols to "local" symbol server too'
    inputs:
      SearchPattern: '**/bin/**/*.pdb'
      SymbolServerType: 'TeamServices'

- ${{ if and( eq(parameters.WithPublish, 'true'), eq(parameters.WithRelease, 'true') ) }}:
  # Publish pipeline artifacts.
  - task: PublishPipelineArtifact@1
    displayName: 'Add publish output to pipeline artifacts'
    inputs:
      path: '$(Build.ArtifactStagingDirectory)\packages'
      artifactName: 'packages'