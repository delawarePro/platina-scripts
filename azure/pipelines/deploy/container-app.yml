# Deploys a container application that was provisioned by a Platina compatible CLI.
#
# The container app should already have a pre-configured revision with needed environment variables, scaling setting, cpu and memory.
# This template will only activate a new container image on the pre-configured container app.
#
# This template expects a json file that describes the image to deploy, e.g.:
# {
#   "registry": "imecpartnerportalscr.azurecr.io"
#   "repository": "imec.portalshell",
#   "version": "20230606.4",
# }
#
# A new, environment specific image tag will be created which will be deployed.
# This new tag will be guarded against deletes so that purges will not remove the deployed version.
# Old environment specific tags will be removed.

parameters:
- name: azureSubscription
  type: string
  displayName: 'Azure Subscription to deploy to.'
- name: azureRegistrySubscription
  type: string
  displayName: 'Azure Subscription of the Azure Registry.'
- name: variablePrefix
  type: string
  displayName: 'Prefix used in output variables from Platina provision CLI.'
  default: 'Platina'
- name: environment
  type: string
  displayName: 'Platina environment name.'
- name: module
  type: string
  displayName: 'Platina module name.'
- name: containerApp
  type: string
  displayName: 'Container application resource name.'
- name: containerAppResourceGroup
  type: string
  displayName: 'Containe application resource group name.'
- name: containerJsonPath
  type: string
  displayName: 'Path to the container.json file.'
- name: label
  type: string
  displayName: 'Optional label to prefix steps in pipeline.'
  default:
- name: preDeploySteps
  type: stepList
  default: []
  displayName: 'Optional steps to execute before deploying container app.'
- name: postDeploySteps
  type: stepList
  default: []
  displayName: 'Optional steps to execute after deploying container app.'

steps:
- task: PowerShell@2
  displayName: '${{ coalesce(parameters.label, parameters.module) }} - Check preconditions'
  inputs:
    targetType: 'inline'
    script: |
      If (-Not (Test-Path '${{ parameters.containerJsonPath }}' -PathType Leaf)) {
          Write-Host "'${{ parameters.containerJsonPath }}' file doesn't exist."
          Write-Host "##vso[task.setVariable variable=skipContainerApp]true"
      }
      Else {
          Write-Host "Preconditions have been met to continue container app deployment."
          Write-Host "##vso[task.setVariable variable=skipContainerApp]false"
      }

- ${{ if ne(variables['skipContainerApp'], 'true') }}:
  - ${{ each step in parameters.preDeploySteps }}:
    - ${{ step }} 
 
- task: AzureCLI@2
  displayName: '${{ coalesce(parameters.label, parameters.module) }} - Pin image'
  inputs:
    azureSubscription: ${{ parameters.azureRegistrySubscription }} # Container registry is typically only available in production subscription.
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $container = Get-Content "${{ parameters.containerJsonPath }}" | ConvertFrom-Json
      $registry = $($container.registry)
      $repository = $($container.repository)
      $image = "$($repository):$($container.version)"
      
      # Allow implicit Azure CLI extension install (container app).
      az config set extension.use_dynamic_install=yes_without_prompt
      
      # Tag image with a environment specific name so we keep track of the image that is deployed.
      $pinnedImage = "$image-${{ parameters.environment }}"
      Write-Host "##vso[task.setvariable variable=pinnedImage]$pinnedImage"
     
      Write-Host "Tagging $image as $pinnedImage"
      az acr import --name $registry --source "$registry/$image" --image $pinnedImage --force

      # Disallow deployed image modification/deletion so that it will not automatically cleaned up by purge tasks.
      # In other words, lock the image.
      Write-Host "Disallowing delete of $pinnedImage"
      az acr repository update --name $registry --image $pinnedImage --write-enabled false --delete-enabled false
      
      # Gather all tags that are relevant to the deployed environment.
      # This means all images/tags that are currently deployed and the one we're about to deploy.
      $revisions = az containerapp revision list --name ${{ parameters.containerApp }} --resource-group $resourceGroup | ConvertFrom-JSON
      $currentTags = @( $revisions | % { $_.properties.template.containers } | % { $_.image.Split(':')[-1] } )
      $currentTags += $pinnedImage.Split(':')[-1]

      # Remove all tags for this environment that are NOT relevant anymore.
      $allTags = az acr repository show-tags --name $registry --repository $repository | ConvertFrom-JSON
      $tagsToRemove = $allTags | Where-Object { $_.EndsWith('-${{ parameters.environment }}') } | Where-Object { $_ -notin $currentTags }
      foreach ($tag in $tagsToRemove) {
        $imageToRemove = "$($repository):$tag"
        Write-Host "Removing tag: $imageToRemove"

        # Unlock tag.
        az acr repository update --name $registry --image $imageToRemove --write-enabled true --delete-enabled true

        # Remove tag.
        az acr repository untag --name $registry --image $imageToRemove
      }
  condition: and(succeeded(), ne(variables['skipContainerApp'], 'true'))

- task: AzureCLI@2
  displayName: '${{ coalesce(parameters.label, parameters.module) }} - Deploy'
  inputs:
    azureSubscription: ${{ parameters['azureSubscription'] }}
    scriptType: 'pscore'
    scriptLocation: 'inlineScript'
    inlineScript: |
      $container = Get-Content "${{ parameters.containerJsonPath }}" | ConvertFrom-Json
      $image = "$($container.registry)/$(pinnedImage)"
      $containerApp = "${{ parameters.containerApp }}"
      $resourceGroup = "${{ parameters.containerAppResourceGroup }}"
      $ts=$(Get-Date -format yyyyMMdd-HHmmss)

      Write-Host "Deploying $image to $containerApp in $resourceGroup"

      # Allow implicit Azure CLI extension install (container app).
      az config set extension.use_dynamic_install=yes_without_prompt

      # Deploy new revision.
      az containerapp update --name $containerApp --image $image --container-name $containerApp --resource-group $resourceGroup
  condition: and(succeeded(), ne(variables['skipContainerApp'], 'true'))

- ${{ if ne(variables['skipContainerApp'], 'true') }}:
  - ${{ each step in parameters.postDeploySteps }}:
    - ${{ step }}