# Deploys a web application that was provisioned by a Platina compatible CLI.
parameters:
- name: azureSubscription
  type: string
  displayName: 'Azure Subscription to deploy to.'
- name: module
  type: string
  displayName: 'Platina module name.'
- name: webApp
  type: string
  displayName: 'Web application resource name.'
- name: webAppResourceGroup
  type: string
  displayName: 'Web application resource group name.'
- name: webAppSlot
  type: string
  displayName: 'Web application deployment slot name.'
  default: production
- name: package
  type: string
  displayName: 'Path to zip package to deploy. The deployment will be skipped if this file doesn''t exist.'
- name: deploymentType
  type: string
  displayName: 'Deployment type for the AzureRmWebAppDeployment task.'
  default: zipDeploy
- name: label
  type: string
  displayName: 'Optional label to prefix steps in pipeline.'
  default:
- name: postStagingSteps
  type: stepList
  default: []
  displayName: 'Optional steps to execute after staging slot deploy, before swapping slots (e.g. smoke testing).'
- name: skipSwapping
  type: boolean
  default: false
  displayName: 'When set to true, don''t swap slots. (this will also skip removing slots)'
- name: postDeploySteps
  type: stepList
  default: []
  displayName: 'Optional steps to execute after production slot deploy, before cleaning up the old slot (when applicable).'
- name: keepStagingSlot
  type: boolean
  default: false
  displayName: 'When set to true, just stops the staging slot instead of deleting it (only works when webAppSlot != production)'

steps:
- task: PowerShell@2
  displayName: '${{ coalesce(parameters.label, parameters.module) }} - Check preconditions'
  inputs:
    targetType: 'inline'
    script: |
      If (-Not (Test-Path '${{ parameters.package }}' -PathType Leaf)) {
          Write-Host "Deployment package doesn't exist."
          Write-Host "##vso[task.setVariable variable=skipWebApp]true"
      }
      ElseIf (('${{ parameters.webApp }}' -like '$(*)') -Or ('${{ parameters.webApp }}' -eq '')) {
          Write-Host "Web app name not set."
          Write-Host "##vso[task.setVariable variable=skipWebApp]true"
      }
      Else {
          Write-Host "Preconditions have been met to continue web app deployment."
          Write-Host 'Deployment package: ''${{ parameters.package }}'''
          Write-Host 'Web app name: ''${{ parameters.webApp }}'''
          Write-Host "##vso[task.setVariable variable=skipWebApp]false"
      }
      # Copy webAppSlot parameter to webAppSlotName variable so we can use it in conditions.
      Write-Host "##vso[task.setVariable variable=webAppSlotName]${{ parameters.webAppSlot }}"

- task: AzureRmWebAppDeployment@4
  displayName: '${{ coalesce(parameters.label, parameters.module) }} - Deploy'
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: ${{ parameters.azureSubscription }}
    WebAppKind: 'webApp'
    WebAppName: ${{ parameters.webApp }}
    deployToSlotOrASE: true
    ResourceGroupName: ${{ parameters.webAppResourceGroup }}
    SlotName: ${{ parameters.webAppSlot }}
    Package: ${{ parameters.package }}
    DeploymentType: ${{ parameters.deploymentType }}
    enableCustomDeployment: true
    TakeAppOfflineFlag: false
  condition: and(succeeded(), ne(variables['skipWebApp'], 'true'))

- ${{ if parameters.keepStagingSlot}}:

  - task: AzureAppServiceManage@0
    displayName: '${{ coalesce(parameters.label, parameters.module) }} - Start slot'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      Action: 'Start Azure App Service'
      WebAppName: ${{ parameters.webApp }}
      ResourceGroupName: ${{ parameters.webAppResourceGroup}}
      SpecifySlotOrASE: true
      Slot: ${{ parameters.webAppSlot }}
    condition: and(succeeded(), ne(variables['skipWebApp'], 'true'), ne(variables['webAppSlotName'], 'production'))

- ${{ if and(parameters.webAppSlot, eq(parameters.webAppSlot, 'production')) }}:
  - ${{ each step in parameters.postDeploySteps }}:
    - ${{ step }} 
    
- ${{ if and(parameters.webAppSlot, ne(parameters.webAppSlot, 'production')) }}:
  - ${{ each step in parameters.postStagingSteps }}:
    - ${{ step }} 

  - task: AzureAppServiceManage@0
    displayName: '${{ coalesce(parameters.label, parameters.module) }} - Swap slots'
    inputs:
      azureSubscription: ${{ parameters.azureSubscription }}
      Action: 'Swap Slots'
      WebAppName: ${{ parameters.webApp }}
      ResourceGroupName: ${{ parameters.webAppResourceGroup }}
      SourceSlot: ${{ parameters.webAppSlot }}
    condition: and(succeeded(), ne(variables['skipWebApp'], 'true'), ne(variables['webAppSlotName'], 'production'), variables['skipSwapping')

  - ${{ each step in parameters.postDeploySteps }}:
    - ${{ step }} 

  - ${{ if and(not(parameters.keepStagingSlot), not(parameters.skipSwapping)) }}:

    - task: AzureAppServiceManage@0
      displayName: '${{ coalesce(parameters.label, parameters.module) }} - Remove slot'
      inputs:
        azureSubscription: ${{ parameters.azureSubscription }}
        Action: 'Delete Slot'
        WebAppName: ${{ parameters.webApp }}
        ResourceGroupName: ${{ parameters.webAppResourceGroup}}
        Slot: ${{ parameters.webAppSlot }}
      condition: and(succeeded(), ne(variables['skipWebApp'], 'true'), ne(variables['webAppSlotName'], 'production'))
  
  - ${{ if parameters.keepStagingSlot}}:

    - task: AzureAppServiceManage@0
      displayName: '${{ coalesce(parameters.label, parameters.module) }} - Stop slot'
      inputs:
        azureSubscription: ${{ parameters.azureSubscription }}
        Action: 'Stop Azure App Service'
        WebAppName: ${{ parameters.webApp }}
        ResourceGroupName: ${{ parameters.webAppResourceGroup}}
        SpecifySlotOrASE: true
        Slot: ${{ parameters.webAppSlot }}
      condition: and(succeeded(), ne(variables['skipWebApp'], 'true'), ne(variables['webAppSlotName'], 'production'))
